#pragma once

#define YY_DECL                     \
    tptp::Parser::token_type             \
    tptp::Scanner::lex(              \
    tptp::Parser::semantic_type* yylval,     \
    tptp::Parser::location_type* yylloc      \
    )

#ifndef __FLEX_LEXER_H
#include "FlexLexer.h"
#endif

#include "parser.hxx"

namespace tptp { 

class Scanner : public yyFlexLexer
{
public:
    Scanner(std::istream* arg_yyin = 0,
        std::ostream* arg_yyout = 0);

    virtual ~Scanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual Parser::token_type lex(
    Parser::semantic_type* yylval,
    Parser::location_type* yylloc
    );

    void setDebug(bool b);
};

} // namespace tptp