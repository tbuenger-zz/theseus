/* $Id$ -*- mode: c++ -*- */
/** \file parser.yy Contains the example Bison parser source */

%code requires {
  #include "core/formula.hpp"
  #include "core/term.hpp"
  #include "core/identifier.hpp"
  #include "tptp/problem.hpp"

    // utility function to append a list element to a std::vector
  template <class T, class V>
  T&& enlist(T& t, V&& v)
  {
      t.emplace_back(std::move(v));
      return std::move(t);
  }


  template <class T>
  std::vector<T> pairtolist(T&& a, T&& b)
  {
      std::vector<T> t;
      t.emplace_back(std::move(a));
      t.emplace_back(std::move(b));
      return t;
  }
}

%{ /*** C/C++ Declarations ***/

#include <stdio.h>
#include <string>
#include <vector>


%}

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "3.0"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start problem

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%define api.namespace {tptp}

/* set the parser's class identifier */
%define parser_class_name {Parser}


%define api.value.type variant

/* keep track of the current position within the input */
%locations

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Scanner& scanner } { class Problem& problem }

/* verbose error messages */
%error-verbose

 /*** BEGIN EXAMPLE - Change the example grammar's tokens below ***/

%token          END      0  "end of file"
%token          EOL     "end of line"
%token <std::string>  VAR_LABEL      "variable identifier"
%token <std::string>  FUNC_LABEL     "function identifier"

%token LEFT RIGHT
%token LEFT_SQUARE RIGHT_SQUARE
%token AND OR ARROW_RIGHT ARROW_LEFT ARROW_BOTH
%token ALL SOME
%token AXIOM CONJECTURE
%token FOF
%token NEGATION

%token COMMENT_PROBLEM
%token COMMENT_STATUS

%type <std::shared_ptr<Formula>> fof_formula fof_unitary_formula fof_binary_formula
%type <std::shared_ptr<FormulaJunction>> fof_binary_assoc fof_and_formula fof_or_formula
%type <std::shared_ptr<FormulaNegation>> fof_unary_formula
%type <std::shared_ptr<FormulaQuantifier>> fof_quantified_formula
%type <std::shared_ptr<FormulaImplication>> fof_binary_nonassoc
%type <std::shared_ptr<FormulaLiteral>> atomic_formula

%type <Identifier*> variable functor constant
%type <std::vector<Identifier*>> fof_variable_list
%type <Quantifier> fol_quantifier
%type <ImplicationDirection> binary_connective

%type <Term*> function_term term
%type <std::vector<Term*>> arguments

%type <tptp::Definition> definition
%type <tptp::Definition::Role> formula_role
%type <std::vector<tptp::Definition>> definition_list

%type <std::string> description

 /*** END EXAMPLE - Change the example grammar's tokens above ***/

%{

#include "tptp/scanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex scanner.lex

%}

%% /*** Grammar Rules ***/

problem : definition_list { problem.definitions = std::move($1); } // TODO
        ;

definition_list : definition_list definition { $$ = enlist($1, std::move($2)); }
                | definition                 { $$ = {1, std::move($1)}; }
                ;

definition : FOF LEFT description ',' formula_role ',' fof_formula RIGHT '.' 
               { $$ = tptp::Definition($5, std::move($3), std::move($7)); }
           ;

formula_role : AXIOM      { $$ = tptp::Definition::Role::Axiom; }
             | CONJECTURE { $$ = tptp::Definition::Role::Conjecture; }
             ;

description  : FUNC_LABEL { $$ = std::move($1); }
             | VAR_LABEL  { $$ = std::move($1); }
             ;

fof_formula : fof_binary_formula  { $$ = std::move($1); }
            | fof_unitary_formula { $$ = std::move($1); }
            ;

fof_binary_formula : fof_binary_nonassoc  { $$ = std::move($1); }
                   | fof_binary_assoc     { $$ = std::move($1); }
                   ;

fof_binary_nonassoc : fof_unitary_formula binary_connective fof_unitary_formula
                        { $$ = std::make_shared<FormulaImplication>($2, std::move($1), std::move($3)); }
                    ;

fof_binary_assoc : fof_or_formula   { $$ = std::move($1); }
                 | fof_and_formula  { $$ = std::move($1); }
                 ;

fof_or_formula : fof_unitary_formula OR fof_unitary_formula
                   { $$ = std::make_shared<FormulaJunction>(Operation::Disjunction, std::move(pairtolist(std::move($1), std::move($3)))); }
               | fof_or_formula OR fof_unitary_formula
                   { $1->children.push_back(std::move($3)); $$ = $1; }
               ;

fof_and_formula : fof_unitary_formula AND fof_unitary_formula
                    { $$ = std::make_shared<FormulaJunction>(Operation::Conjunction, std::move(pairtolist(std::move($1), std::move($3)))); }
                | fof_and_formula AND fof_unitary_formula
                    { $1->children.push_back(std::move($3)); $$ = $1; }
                ;

fof_unitary_formula : fof_quantified_formula  { $$ = std::move($1); }
                    | fof_unary_formula       { $$ = std::move($1); }
                    | atomic_formula          { $$ = std::move($1); }
                    | LEFT fof_formula RIGHT  { $$ = std::move($2); }
                    ;

fof_quantified_formula : fol_quantifier LEFT_SQUARE fof_variable_list RIGHT_SQUARE ':' fof_unitary_formula
                           { $$ = std::make_shared<FormulaQuantifier>($1, std::move($3), std::move($6)); }
                       ;

fof_variable_list : fof_variable_list ',' variable  { $$ = enlist($1, std::move($3)); }
                  | variable                        { $$ = {1, $1}; }
                  ;

fof_unary_formula : NEGATION fof_unitary_formula
                      { $$ = std::make_shared<FormulaNegation>(std::move($2)); }
                  ;

binary_connective : ARROW_LEFT    { $$ = ImplicationDirection::Left; }
                  | ARROW_RIGHT   { $$ = ImplicationDirection::Right; }
                  | ARROW_BOTH    { $$ = ImplicationDirection::Both; }
                  ;

fol_quantifier : ALL    { $$ = Quantifier::Universal; }
               | SOME   { $$ = Quantifier::Existential; }
               ;


atomic_formula : function_term { $$ = std::make_shared<FormulaLiteral>(Literal($1)); }
               ;

function_term : functor LEFT arguments RIGHT { $$ = TermDatabase::instance().get($1, $3); }
              ;

arguments : arguments ',' term  {$$ = enlist($1, std::move($3));}
          | term                {$$ = {1, $1};}
          ;

term : function_term     { $$ = $1; }
     | variable          { $$ = TermDatabase::instance().get($1); }
     | constant          { $$ = TermDatabase::instance().get($1); }
     ;

functor : FUNC_LABEL {$$ = IdentifierFactory::instance().function($1);}
         ;

constant : functor {$$ = $1;}
         ;

variable : VAR_LABEL {$$ = IdentifierFactory::instance().variable($1);}
         ;
 /*** END EXAMPLE - Change the example grammar rules above ***/

%% /*** Additional Code ***/

void tptp::Parser::error(const Parser::location_type& l,
                const std::string& m)
{
    std::cout << l << ":" << m;
}