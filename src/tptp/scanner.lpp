%{ /*** C/C++ Declarations ***/

#include <string>

#include "scanner.hpp"

using token = theseus::tptp::Parser::token;
using token_type = theseus::tptp::Parser::token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

%option debug

%option noyywrap

%option     outfile="scanner.cxx"

%option header-file="scanner.hxx"

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
%{
#define YY_USER_ACTION  yylloc->columns(yyleng);
%}

%% /*** Regular Expressions Part ***/

 /* code to place at the beginning of yylex() */
%{
    // reset location
    yylloc->step();
%}

 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/


"axiom" {return token::AXIOM;}
"conjecture" {return token::AXIOM;}
"fof" {return token::FOF;}


\n   {yylloc->lines(1); return token::EOL;}

[ \t\r]   ; // ignore all whitespace
"!"     {return  token::ALL;}
"?"     {return  token::SOME;}
"=>"     {return  token::ARROW;}
"|"     {return  token::OR;}
"&"     {return  token::AND;}
"("     {return  token::LEFT;}
")"     {return  token::RIGHT;}
"["     {return  token::LEFT_SQUARE;}
"]"     {return  token::RIGHT_SQUARE;}
"~"     {return  token::NEGATION;}

[A-Z][A-Za-z0-9_]* {
    yylval->build<std::string>() = yytext;
    return token::VAR_LABEL;
}

[a-z][A-Za-z0-9_]* {
    yylval->build<std::string>() = yytext;
    return token::FUNC_LABEL;
}

.       {return static_cast<token_type>(*yytext);}


 /*** END EXAMPLE - Change the example lexer rules above ***/

%% /*** Additional Code ***/

namespace theseus {
namespace tptp {

Scanner::Scanner(std::istream* in,
         std::ostream* out)
    : yyFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}
}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in yyFlexLexer::yylex() !" << std::endl;
    return 0;
}